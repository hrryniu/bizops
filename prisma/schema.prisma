// Prisma Schema dla BizOps
// Obsługuje SQLite (dev) i PostgreSQL (prod)

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  passwordHash String
  name         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  settings     Settings?
  contractors  Contractor[]
  invoices     Invoice[]
  expenses     Expense[]
  taxEvents    TaxEvent[]
  projects     Project[]
}

model Settings {
  id                 String  @id @default(cuid())
  userId             String  @unique
  companyName        String?
  companyNIP         String?
  companyAddress     String?
  companyBankAccount String? // Deprecated - use bankAccounts instead
  companyLogo        String?
  invoiceNumbering   String? // np. "NR/{{MM}}/{{YYYY}}"
  taxFormLabel       String? // np. "liniowy 19%" – tylko opis
  defaultVatRates    String  @default("[\"23\",\"8\",\"5\",\"0\",\"zw\"]") // JSON array
  calendarTemplates  String  @default("[]") // JSON array definicji terminów
  locale             String  @default("pl-PL")
  darkMode           String  @default("system") // system, light, dark
  theme              String  @default("system") // light, dark, system
  primaryColor       String  @default("blue") // blue, green, purple, red, orange, teal
  accentColor        String  @default("blue") // blue, green, purple, red, orange, teal
  layout             String  @default("comfortable") // compact, comfortable, spacious
  bankAccounts       String  @default("[]") // JSON array of {name, accountNumber, isDefault}
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Contractor {
  id        String    @id @default(cuid())
  userId    String
  name      String
  nip       String?
  address   String?
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]
  expenses  Expense[]
}

model Invoice {
  id                  String        @id @default(cuid())
  userId              String
  number              String
  issueDate           DateTime
  saleDate            DateTime?
  dueDate             DateTime?
  paymentMethod       String?       // przelew, gotówka
  selectedBankAccount String?       // Nazwa wybranego konta bankowego
  buyerId             String?
  buyerPrivatePerson  String?       // Imię i nazwisko dla osoby prywatnej
  status              String        @default("DRAFT")
  currency            String        @default("PLN")
  notes               String?
  totalNet            Decimal       @default(0)
  totalVat            Decimal       @default(0)
  totalGross          Decimal       @default(0)
  items               InvoiceItem[]
  buyer               Contractor?   @relation(fields: [buyerId], references: [id], onDelete: SetNull)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([userId, issueDate])
  @@index([status])
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  name      String
  quantity  Decimal  @default(1)
  unit      String?  // szt, h
  netPrice  Decimal  @default(0)
  vatRate   String   // "23","8","5","0","zw"
  discount  Decimal  @default(0) // %
  lineNet   Decimal  @default(0)
  lineVat   Decimal  @default(0)
  lineGross Decimal  @default(0)
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id                     String      @id @default(cuid())
  userId                 String
  contractorId           String?
  contractorName         String?     // Nazwa kontrahenta (jeśli nie z listy)
  contractorNIP          String?     // NIP kontrahenta (jeśli nie z listy)
  contractorAddress      String?     // Adres kontrahenta (jeśli nie z listy)
  docNumber              String?
  date                   DateTime
  issueDate              DateTime?   // Data wystawienia faktury
  saleDate               DateTime?   // Data sprzedaży/wykonania usługi
  category               String?
  vatRate                String?     // "23" itd.
  netAmount              Decimal     @default(0)
  vatAmount              Decimal     @default(0)
  grossAmount            Decimal     @default(0)
  notes                  String?
  attachmentPath         String?
  contractor             Contractor? @relation(fields: [contractorId], references: [id], onDelete: SetNull)
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([userId, date])
  @@index([category])
}

model TaxEvent {
  id          String    @id @default(cuid())
  userId      String
  templateKey String    // identyfikator rodzaju zdarzenia, np. "VAT_JPK"
  title       String
  description String?
  dueDate     DateTime
  status      String    @default("PENDING")
  relatedUrl  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate])
  @@index([status])
}

model Project {
  id          String         @id @default(cuid())
  userId      String
  name        String
  slug        String         @unique
  color       String?
  icon        String?        // nazwa ikony z lucide
  imagePath   String?
  description String?
  deadline    DateTime?
  priority    Int            @default(0)
  status      String         @default("active")
  notesMd     String?        // markdown
  columns     KanbanColumn[]
  tasks       Task[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model KanbanColumn {
  id        String   @id @default(cuid())
  projectId String
  name      String
  order     Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, order])
}

model Task {
  id          String        @id @default(cuid())
  projectId   String
  columnId    String?
  title       String
  description String?
  priority    Int           @default(0)
  dueDate     DateTime?
  tags        String        @default("[]") // JSON array
  checklist   String?       // JSON [{text, done}]
  attachments String?       // JSON [{name, path}]
  status      String        @default("todo")
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  column      KanbanColumn? @relation(fields: [columnId], references: [id], onDelete: SetNull)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId, columnId])
}

// Enums removed - using String fields for SQLite compatibility
// InvoiceStatus: DRAFT, ISSUED, PAID, CORRECTED, CANCELED
// TaxStatus: PENDING, DONE




