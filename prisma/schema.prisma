// Prisma Schema dla BizOps
// Obs≈Çuguje SQLite (dev) i PostgreSQL (prod)

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Settings {
  id                 String  @id @default(cuid())
  userId             String  @unique
  companyName        String?
  companyNIP         String?
  companyAddress     String?
  companyBankAccount String? // Deprecated - use bankAccounts instead
  companyLogo        String?
  showLogoOnInvoices Boolean @default(true) // Czy wy≈õwietlaƒá logo na fakturach
  invoiceTemplate    String  @default("classic") // Szablon faktury: classic, modern, minimal
  invoiceNumbering   String? // np. "NR/{{MM}}/{{YYYY}}"
  taxFormLabel       String? // np. "liniowy 19%" ‚Äì tylko opis
  isVatPayer         Boolean @default(true) // Czy firma jest p≈Çatnikiem VAT
  defaultVatRates    String  @default("[\"23\",\"8\",\"5\",\"0\",\"zw\"]") // JSON array
  calendarTemplates  String  @default("[]") // JSON array definicji termin√≥w
  expenseCategories  String  @default("[\"Biuro\",\"Transport\",\"Wyposa≈ºenie\",\"Marketing\",\"Us≈Çugi\",\"Inne\"]") // JSON array kategorii koszt√≥w
  locale             String  @default("pl-PL")
  darkMode           String  @default("system") // system, light, dark
  theme              String  @default("system") // light, dark, system
  primaryColor       String  @default("blue") // blue, green, purple, red, orange, teal
  accentColor        String  @default("blue") // blue, green, purple, red, orange, teal
  layout             String  @default("comfortable") // compact, comfortable, spacious
  bankAccounts       String  @default("[]") // JSON array of {name, accountNumber, isDefault}
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Contractor {
  id        String    @id @default(cuid())
  userId    String
  name      String
  nip       String?
  address   String?
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]
  expenses  Expense[]
}

model Invoice {
  id                  String        @id @default(cuid())
  userId              String
  number              String
  issueDate           DateTime
  saleDate            DateTime?
  dueDate             DateTime?
  paymentMethod       String?       // przelew, got√≥wka
  selectedBankAccount String?       // Nazwa wybranego konta bankowego
  buyerId             String?
  buyerPrivatePerson  String?       // Imiƒô i nazwisko dla osoby prywatnej
  status              String        @default("DRAFT")
  currency            String        @default("PLN")
  notes               String?
  totalNet            Decimal       @default(0)
  totalVat            Decimal       @default(0)
  totalGross          Decimal       @default(0)
  items               InvoiceItem[]
  buyer               Contractor?   @relation(fields: [buyerId], references: [id], onDelete: SetNull)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([userId, issueDate])
  @@index([status])
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  name      String
  quantity  Decimal  @default(1)
  unit      String?  // szt, h
  netPrice  Decimal  @default(0)
  vatRate   String   // "23","8","5","0","zw"
  discount  Decimal  @default(0) // %
  lineNet   Decimal  @default(0)
  lineVat   Decimal  @default(0)
  lineGross Decimal  @default(0)
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id                     String      @id @default(cuid())
  userId                 String
  contractorId           String?
  contractorName         String?     // Nazwa kontrahenta (je≈õli nie z listy)
  contractorNIP          String?     // NIP kontrahenta (je≈õli nie z listy)
  contractorAddress      String?     // Adres kontrahenta (je≈õli nie z listy)
  docNumber              String?
  date                   DateTime
  issueDate              DateTime?   // Data wystawienia faktury
  saleDate               DateTime?   // Data sprzeda≈ºy/wykonania us≈Çugi
  category               String?
  vatRate                String?     // "23" itd.
  netAmount              Decimal     @default(0)
  vatAmount              Decimal     @default(0)
  grossAmount            Decimal     @default(0)
  isInstallment          Boolean     @default(false) // Zakup na raty - nie wliczaƒá do sumy koszt√≥w
  notes                  String?
  attachmentPath         String?
  contractor             Contractor? @relation(fields: [contractorId], references: [id], onDelete: SetNull)
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([userId, date])
  @@index([category])
}

model TaxEvent {
  id          String    @id @default(cuid())
  userId      String
  templateKey String    // identyfikator rodzaju zdarzenia, np. "VAT_JPK"
  title       String
  description String?
  dueDate     DateTime
  status      String    @default("PENDING")
  relatedUrl  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate])
  @@index([status])
}

model Project {
  id          String         @id @default(cuid())
  userId      String
  name        String
  slug        String         @unique
  color       String?
  icon        String?        // nazwa ikony z lucide
  imagePath   String?
  description String?
  deadline    DateTime?
  priority    Int            @default(0)
  status      String         @default("active")
  notesMd     String?        // markdown
  columns     KanbanColumn[]
  tasks       Task[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model KanbanColumn {
  id        String   @id @default(cuid())
  projectId String
  name      String
  order     Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, order])
}

model Task {
  id          String        @id @default(cuid())
  projectId   String
  columnId    String?
  title       String
  description String?
  priority    Int           @default(0)
  dueDate     DateTime?
  tags        String        @default("[]") // JSON array
  checklist   String?       // JSON [{text, done}]
  attachments String?       // JSON [{name, path}]
  status      String        @default("todo")
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  column      KanbanColumn? @relation(fields: [columnId], references: [id], onDelete: SetNull)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId, columnId])
}

// ========================================
// üè¶ Bank Integration Models
// ========================================

model BankConnection {
  id               String            @id @default(cuid())
  userId           String
  bankName         String            // "mBank", "PKO BP", "BNP Paribas"
  accountName      String            // Friendly name
  accountNumber    String            // Encrypted IBAN
  accessToken      String?           // Encrypted PSD2 access token
  refreshToken     String?           // Encrypted refresh token
  tokenExpiresAt   DateTime?
  consentId        String?           // PSD2 consent ID
  consentExpiresAt DateTime?
  isActive         Boolean           @default(true)
  lastSyncedAt     DateTime?
  syncFrequency    String            @default("daily") // daily, weekly, manual
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     BankTransaction[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId])
  @@index([isActive])
}

model BankTransaction {
  id                 String          @id @default(cuid())
  bankConnectionId   String
  transactionId      String          @unique // Bank's transaction ID
  date               DateTime
  amount             Decimal
  currency           String          @default("PLN")
  counterpartyName   String?
  counterpartyAccount String?
  title              String?
  description        String?
  type               String          // "DEBIT", "CREDIT"
  category           String?         // Auto-categorized
  isReconciled       Boolean         @default(false)
  reconciledWith     String?         // Invoice or Expense ID
  reconciledType     String?         // "INVOICE", "EXPENSE"
  bankConnection     BankConnection  @relation(fields: [bankConnectionId], references: [id], onDelete: Cascade)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@index([bankConnectionId, date])
  @@index([isReconciled])
  @@index([reconciledWith])
}

// ========================================
// üí∏ Tax & ZUS Models
// ========================================

model TaxCalculation {
  id                String   @id @default(cuid())
  userId            String
  periodType        String   // "MONTHLY", "QUARTERLY", "ANNUAL"
  periodStart       DateTime
  periodEnd         DateTime
  businessType      String   // "SOLE_PROPRIETORSHIP", "LIMITED_COMPANY"
  taxForm           String   // "PIT-36", "PIT-36L", "CIT-8"
  totalRevenue      Decimal  @default(0)
  totalExpenses     Decimal  @default(0)
  taxableIncome     Decimal  @default(0)
  pitAmount         Decimal  @default(0)
  citAmount         Decimal  @default(0)
  zusAmount         Decimal  @default(0)
  vatAmount         Decimal  @default(0)
  healthInsurance   Decimal  @default(0)
  socialInsurance   Decimal  @default(0)
  totalTaxLiability Decimal  @default(0)
  calculationData   String?  // JSON with detailed breakdown
  status            String   @default("DRAFT") // DRAFT, FINAL, SUBMITTED
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId, periodStart])
  @@index([status])
}

// ========================================
// üìä KPI & Analytics Models
// ========================================

model KPISnapshot {
  id                     String   @id @default(cuid())
  userId                 String
  date                   DateTime
  period                 String   // "DAILY", "WEEKLY", "MONTHLY"
  revenue                Decimal  @default(0)
  expenses               Decimal  @default(0)
  netProfit              Decimal  @default(0)
  grossProfit            Decimal  @default(0)
  operatingCashflow      Decimal  @default(0)
  taxLiabilities         Decimal  @default(0)
  outstandingInvoices    Int      @default(0)
  outstandingAmount      Decimal  @default(0)
  avgPaymentDays         Decimal  @default(0)
  liquidityRatio         Decimal  @default(0)
  profitMargin           Decimal  @default(0)
  expenseRatio           Decimal  @default(0)
  revenueGrowth          Decimal  @default(0) // % compared to previous period
  expenseGrowth          Decimal  @default(0)
  customMetrics          String?  // JSON for additional KPIs
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())

  @@index([userId, date])
  @@index([period])
}

// ========================================
// üíß Cashflow Forecasting Models
// ========================================

model CashflowForecast {
  id                  String   @id @default(cuid())
  userId              String
  forecastDate        DateTime
  forecastType        String   @default("PREDICTED") // PREDICTED, ACTUAL
  expectedRevenue     Decimal  @default(0)
  expectedExpenses    Decimal  @default(0)
  expectedCashflow    Decimal  @default(0)
  cumulativeCashflow  Decimal  @default(0)
  confidence          Decimal  @default(0) // 0-100%
  modelVersion        String?  // ML model version used
  modelData           String?  // JSON with model parameters
  actualRevenue       Decimal? // Filled when actual data available
  actualExpenses      Decimal?
  actualCashflow      Decimal?
  variance            Decimal? // Difference between predicted and actual
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId, forecastDate])
  @@index([forecastType])
}

// ========================================
// ü§ñ AI Assistant Models
// ========================================

model AIQuery {
  id            String   @id @default(cuid())
  userId        String
  query         String   // User's natural language query
  response      String   // AI's response
  queryType     String?  // "FINANCIAL_SUMMARY", "PREDICTION", "REPORT", "OPTIMIZATION"
  context       String?  // JSON with relevant data used
  tokensUsed    Int      @default(0)
  modelVersion  String?  // "gpt-4", "gpt-4-turbo"
  responseTime  Int?     // milliseconds
  wasHelpful    Boolean? // User feedback
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@index([userId, createdAt])
}

model AIInsight {
  id              String   @id @default(cuid())
  userId          String
  insightType     String   // "COST_OPTIMIZATION", "ANOMALY", "TREND", "RECOMMENDATION"
  title           String
  description     String
  severity        String   @default("INFO") // "INFO", "WARNING", "CRITICAL"
  category        String?  // "EXPENSE", "REVENUE", "TAX", "CASHFLOW"
  relatedData     String?  // JSON with supporting data
  actionable      Boolean  @default(false)
  suggestedAction String?
  isDismissed     Boolean  @default(false)
  dismissedAt     DateTime?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, isDismissed])
  @@index([insightType])
  @@index([severity])
}

// ========================================
// üîî Notification Models
// ========================================

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String    // "PAYMENT_REMINDER", "TAX_DEADLINE", "BANK_SYNC", "AI_INSIGHT"
  title       String
  message     String
  priority    String    @default("NORMAL") // "LOW", "NORMAL", "HIGH", "URGENT"
  isRead      Boolean   @default(false)
  actionUrl   String?
  actionLabel String?
  relatedId   String?   // ID of related entity (invoice, expense, etc.)
  relatedType String?   // "INVOICE", "EXPENSE", "TAX_EVENT"
  scheduledFor DateTime? // For future notifications
  sentAt      DateTime?
  readAt      DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, isRead])
  @@index([type])
  @@index([scheduledFor])
}

// ========================================
// üìÖ Calendar Integration Models
// ========================================

model CalendarIntegration {
  id                String    @id @default(cuid())
  userId            String
  provider          String    // "GOOGLE", "OUTLOOK"
  email             String
  accessToken       String    // Encrypted
  refreshToken      String?   // Encrypted
  tokenExpiresAt    DateTime?
  calendarId        String?   // Primary calendar ID
  isActive          Boolean   @default(true)
  syncEnabled       Boolean   @default(true)
  lastSyncedAt      DateTime?
  syncSettings      String?   // JSON: {reminderDays: [3, 1], eventTypes: [...]}
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@unique([userId, provider])
}

// ========================================
// Update User model with new relations
// ========================================

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  passwordHash          String
  name                  String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  settings              Settings?
  contractors           Contractor[]
  invoices              Invoice[]
  expenses              Expense[]
  taxEvents             TaxEvent[]
  projects              Project[]
  bankConnections       BankConnection[]
  taxCalculations       TaxCalculation[]
  kpiSnapshots          KPISnapshot[]
  cashflowForecasts     CashflowForecast[]
  aiQueries             AIQuery[]
  aiInsights            AIInsight[]
  notifications         Notification[]
  calendarIntegrations  CalendarIntegration[]
}

// Enums removed - using String fields for SQLite compatibility
// InvoiceStatus: DRAFT, ISSUED, PAID, CORRECTED, CANCELED
// TaxStatus: PENDING, DONE
// BankTransactionType: DEBIT, CREDIT
// NotificationPriority: LOW, NORMAL, HIGH, URGENT




